/// <reference types="node" />
export class Http2WebTransportSession {
    /**
     * @param {{stream?: Http2Stream, ws?: WebSocket, isclient:boolean,
     * createParser:import('../types.js').CreateParserFunction
     * sendWindowOffset: Number,
     * receiveWindowOffset: Number,
     * shouldAutoTuneReceiveWindow: boolean
     * receiveWindowSizeLimit: Number}} args
     * */
    constructor({ stream, ws, isclient, createParser, sendWindowOffset, receiveWindowOffset, shouldAutoTuneReceiveWindow, receiveWindowSizeLimit }: {
        stream?: Http2Stream;
        ws?: WebSocket;
        isclient: boolean;
        createParser: import('../types.js').CreateParserFunction;
        sendWindowOffset: number;
        receiveWindowOffset: number;
        shouldAutoTuneReceiveWindow: boolean;
        receiveWindowSizeLimit: number;
    });
    jsobj: any;
    stream: import("http2").Http2Stream | undefined;
    ws: WebSocket | undefined;
    capsParser: ParserBase;
    unidiId: number;
    bidiId: number;
    isclient: boolean;
    flowController: FlowController;
    sendInitialParameters(): void;
    /**
     * @param {Uint8Array} chunk
     */
    writeDatagram(chunk: Uint8Array): void;
    orderUnidiStream(): void;
    orderBidiStream(): void;
    orderSessionStats(): void;
    orderDatagramStats(): void;
    notifySessionDraining(): void;
    /**
     * @param {{ code: number, reason: string }} arg
     */
    close({ code, reason }: {
        code: number;
        reason: string;
    }): void;
    /**
     * @param {bigint} windowOffset
     */
    sendWindowUpdate(windowOffset: bigint): void;
    /**
     * @param {bigint} pos
     */
    reportBlocked(pos: bigint): void;
    /**
     * @param {bigint} windowOffset
     */
    sendBlocked(windowOffset: bigint): void;
    connected(): boolean;
    /**
     * @param {{ code: number, reason: string }} arg
     */
    closeConnection({ code, reason }: {
        code: number;
        reason: string;
    }): void;
    smoothedRtt(): any;
}
export type Http2Stream = import('http2').Http2Stream;
import { ParserBase } from "./parserbase.js";
import { FlowController } from "./flowcontroller.js";
//# sourceMappingURL=session.d.ts.map