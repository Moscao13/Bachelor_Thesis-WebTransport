/**
 * @param{Number|bigint} int
 * @returns {Number}
 */
export function lengthVarInt(int: number | bigint): number;
export class ParserBase {
    static PADDING: number;
    static WT_RESET_STREAM: number;
    static WT_STOP_SENDING: number;
    static WT_STREAM_WOFIN: number;
    static WT_STREAM_WFIN: number;
    static WT_MAX_DATA: number;
    static WT_MAX_STREAM_DATA: number;
    static WT_MAX_STREAMS_BIDI: number;
    static WT_MAX_STREAMS_UNIDI: number;
    static WT_DATA_BLOCKED: number;
    static WT_STREAM_DATA_BLOCKED: number;
    static WT_STREAMS_BLOCKED_UNIDI: number;
    static WT_STREAMS_BLOCKED_BIDI: number;
    static DATAGRAM: number;
    /**
     * @param {import('../types').ParserInit} arg
     */
    constructor({ nativesession, isclient, initialStreamSendWindowOffset, initialStreamReceiveWindowOffset, streamShouldAutoTuneReceiveWindow, streamReceiveWindowSizeLimit }: import('../types').ParserInit);
    session: any;
    isclient: boolean;
    /** @type {boolean} */
    blocked: boolean;
    initialStreamSendWindowOffset: number;
    initialStreamReceiveWindowOffset: number;
    streamShouldAutoTuneReceiveWindow: boolean;
    streamReceiveWindowSizeLimit: number;
    wtstreams: Map<any, any>;
    /**
     * @abstract
     * @param {Buffer|Uint8Array} data
     */
    parseData(data: Buffer | Uint8Array): void;
    /**
     * @abstract
     * @param{{type: Number, headerVints: Array<Number|bigint>, payload: Uint8Array|undefined}} bs
     */
    writeCapsule({ type, headerVints, payload }: {
        type: number;
        headerVints: Array<number | bigint>;
        payload: Uint8Array | undefined;
    }): void;
    /**
     * @param{{code: Number, reason: string}}arg
     */
    sendClose({ code, reason }: {
        code: number;
        reason: string;
    }): void;
    /**
     * @param {Number} streamid
     */
    newStream(streamid: number): Http2WebTransportStream;
    drainWrites(): void;
    /**
     * @param {bigint|undefined} val
     */
    onMaxData(val: bigint | undefined): void;
    /**
     * @param {bigint|undefined} streamid
     * @param {bigint|undefined} offset
     */
    onMaxStreamData(streamid: bigint | undefined, offset: bigint | undefined): void;
    /**
     * @param {bigint|undefined} val
     */
    onDataBlocked(val: bigint | undefined): void;
    /**
     * @param {bigint|undefined} streamid
     * @param {bigint|undefined} offset
     */
    onStreamDataBlocked(streamid: bigint | undefined, offset: bigint | undefined): void;
    /**
     * @param {number} code
     */
    closeHttp2Stream(code: number): void;
}
import { Http2WebTransportStream } from "./stream.js";
//# sourceMappingURL=parserbase.d.ts.map