/// <reference types="node" />
/**
 * @typedef {import('./types').WebTransportSession} WebTransportSession
 * @typedef {import('./types').NativeHttp3WTSession} NativeHttp3WTSession
 * @typedef {import('./types').Http3ServerEventHandler} Http3ServerEventHandler
 * @typedef {import('./types').Http3WTServerSessionVisitorEvent} Http3WTServerSessionVisitorEvent
 * @typedef {import('./types').ServerStatusEvent} ServerStatusEvent
 * @typedef {import('./types').ServerSessionRequestEvent} ServerSessionRequestEvent
 * @typedef {import('./types').Http3ServerInit} Http3ServerInit
 */
/**
 * @implements {Http3ServerEventHandler}
 */
export class Http3Server extends Http3WebTransport implements Http3ServerEventHandler {
    /**
     *
     * @param {Http3ServerInit} args
     */
    constructor(args: Http3ServerInit);
    /** @type {Record<string, ReadableStream>} */
    sessionStreams: Record<string, ReadableStream>;
    /** @type {Record<string, ReadableStreamDefaultController<Http3WTSession>>} */
    sessionController: Record<string, ReadableStreamDefaultController<Http3WTSession>>;
    port: number | null;
    host: string | null;
    /** @type {any} */
    requestHandler: any;
    _ready: import("./types").Deferred<unknown>;
    ready: Promise<unknown>;
    _closed: import("./types").Deferred<unknown>;
    closed: Promise<unknown>;
    startServer(): void;
    stopServer(): void;
    stopped: boolean | undefined;
    /**
     * @returns {{ port: number, host: string, family: 'IPv4' | 'IPv6' } | null}
     */
    address(): {
        port: number;
        host: string;
        family: 'IPv4' | 'IPv6';
    } | null;
    /**
     * @param {any} callback
     */
    setRequestCallback(callback: any): void;
    /**
     * @param {string} path
     * @param {object} [args]
     * @param {boolean} [args.noAutoPaths]
     * @returns {ReadableStream<WebTransportSession>}
     */
    sessionStream(path: string, args?: {
        noAutoPaths?: boolean | undefined;
    } | undefined): ReadableStream<WebTransportSession>;
    /**
     * @param {ServerSessionRequestEvent} args
     */
    onSessionRequest(args: ServerSessionRequestEvent): void;
    /**
     * @param {Http3WTServerSessionVisitorEvent} args
     */
    onHttp3WTSessionVisitor(args: Http3WTServerSessionVisitorEvent): void;
    /**
     */
    onServerError(): void;
    /**
     */
    onServerListening(): void;
    /**
     */
    onServerClose(): void;
    /**
     * @param {ServerStatusEvent} evt
     */
    onServerStatus(evt: ServerStatusEvent): void;
    /**
     * @param {Http3WTServerSessionVisitorEvent | ServerStatusEvent | ServerSessionRequestEvent} args
     */
    customCallback(args: Http3WTServerSessionVisitorEvent | ServerStatusEvent | ServerSessionRequestEvent): void;
}
export type WebTransportSession = import('./types').WebTransportSession;
export type NativeHttp3WTSession = import('./types').NativeHttp3WTSession;
export type Http3ServerEventHandler = import('./types').Http3ServerEventHandler;
export type Http3WTServerSessionVisitorEvent = import('./types').Http3WTServerSessionVisitorEvent;
export type ServerStatusEvent = import('./types').ServerStatusEvent;
export type ServerSessionRequestEvent = import('./types').ServerSessionRequestEvent;
export type Http3ServerInit = import('./types').Http3ServerInit;
import { Http3WebTransport } from "./transport.js";
import { ReadableStream } from "stream/web";
import { Http3WTSession } from "./session.js";
//# sourceMappingURL=server.d.ts.map