/// <reference types="node" />
/**
 * @typedef {import('./dom').WebTransportCloseInfo} WebTransportCloseInfo
 * @typedef {import('./dom').WebTransportBidirectionalStream} WebTransportBidirectionalStream
 * @typedef {import('./dom').WebTransportReceiveStream} WebTransportReceiveStream
 */
/**
 * @template T
 * @typedef {import('node:stream/web').ReadableStream<T>} ReadableStream<T>
 */
/**
 * @typedef {import('./dom').WebTransport} WebTransportInterface
 *
 * @implements {WebTransportInterface}
 */
export class WebTransport implements WebTransportInterface {
    /**
     * @param {string} url
     * @param {import('./dom').WebTransportOptions} [args]
     */
    constructor(url: string, args?: import("./dom").WebTransportOptions | undefined);
    ready: Promise<void>;
    closed: Promise<import("./dom").WebTransportCloseInfo>;
    draining: Promise<undefined>;
    datagrams: import("./dom").WebTransportDatagramDuplexStream;
    /** @type {ReadableStream<WebTransportBidirectionalStream>} */
    incomingBidirectionalStreams: ReadableStream<WebTransportBidirectionalStream>;
    incomingUnidirectionalStreams: import("stream/web").ReadableStream<import("./dom").WebTransportReceiveStream>;
    get reliability(): import("./dom").WebTransportReliabilityMode;
    get congestionControl(): import("./dom").WebTransportCongestionControl;
    getStats(): Promise<any>;
    /**
     * @param {WebTransportCloseInfo} [closeinfo]
     */
    close(closeinfo?: import("./dom").WebTransportCloseInfo | undefined): void;
    createBidirectionalStream(): Promise<import("./dom").WebTransportBidirectionalStream>;
    createUnidirectionalStream(): Promise<import("./dom").WebTransportSendStream>;
}
export type WebTransportCloseInfo = import('./dom').WebTransportCloseInfo;
export type WebTransportBidirectionalStream = import('./dom').WebTransportBidirectionalStream;
export type WebTransportReceiveStream = import('./dom').WebTransportReceiveStream;
/**
 * <T>
 */
export type ReadableStream<T> = import('node:stream/web').ReadableStream<T>;
export type WebTransportInterface = import('./dom').WebTransport;
//# sourceMappingURL=webtransport.d.ts.map