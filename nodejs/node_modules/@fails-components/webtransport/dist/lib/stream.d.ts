/// <reference types="node" />
/**
 * WebTransport stream events
 * @typedef {import('./types').WebTransportStreamEventHandler} WebTransportStreamEventHandler
 * @typedef {import('./types').StreamRecvSignalEvent} StreamRecvSignalEvent
 * @typedef {import('./types').StreamReadEvent} StreamReadEvent
 * @typedef {import('./types').StreamWriteEvent} StreamWriteEvent
 * @typedef {import('./types').StreamResetEvent} StreamResetEvent
 * @typedef {import('./types').StreamNetworkFinishEvent} StreamNetworkFinishEvent
 *
 * @typedef {import('./types').NativeHttp3WTStream} NativeHttp3WTStream
 *
 * @typedef {import('./dom').WebTransportReceiveStream} WebTransportReceiveStream
 * @typedef {import('./dom').WebTransportSendStream} WebTransportSendStream
 *
 * @typedef {import('./session').Http3WTSession} Http3WTSession
 *
 * @typedef {import('stream/web').WritableStreamDefaultController} WritableStreamDefaultController
 */
export class Http3WTStream {
    /**
     * @param {StreamRecvSignalEvent | StreamReadEvent | StreamWriteEvent | StreamResetEvent | StreamNetworkFinishEvent} args
     */
    static callback(args: StreamRecvSignalEvent | StreamReadEvent | StreamWriteEvent | StreamResetEvent | StreamNetworkFinishEvent): void;
    /**
     * @param {object} args
     * @param {NativeHttp3WTStream} args.object
     * @param {Http3WTSession} args.parentobj
     * @param {object} args.transport
     * @param {boolean} args.bidirectional
     * @param {boolean} args.incoming
     */
    constructor(args: {
        object: NativeHttp3WTStream;
        parentobj: Http3WTSession;
        transport: object;
        bidirectional: boolean;
        incoming: boolean;
    });
    objint: import("./types").NativeHttp3WTStream;
    parentobj: import("./session").Http3WTSession;
    transport: object;
    bidirectional: boolean;
    incoming: boolean;
    closed: boolean;
    /** @type {Promise<void> | null} */
    pendingoperation: Promise<void> | null;
    pendingres: (() => void) | null;
    /** @type {WebTransportReceiveStream} */
    readable: WebTransportReceiveStream;
    /** @type {WebTransportSendStream} */
    writable: WebTransportSendStream;
    /** @type {Promise<void> | null} */
    pendingoperationRead: Promise<void> | null;
    pendingresRead: ((value: void | PromiseLike<void>) => void) | null;
    /** @type {Number} */
    incomingbufferfilled: number;
    /** @type {Number} */
    incomingbufferreadpos: number;
    readableController: import("stream/web").ReadableByteStreamController;
    cancelres: (() => void) | null;
    readableclosed: boolean;
    writableController: import("stream/web").WritableStreamDefaultController;
    abortres: (() => void) | null;
    drainBuffer(): void;
    /**
     * @param {import('./types').StreamRecvSignalEvent} args
     * @returns {void}
     */
    onStreamRecvSignal(args: import('./types').StreamRecvSignalEvent): void;
    writableclosed: boolean | undefined;
    /**
     * @param {StreamReadEvent} args
     * @returns {void}
     */
    onStreamRead(args: StreamReadEvent): void;
    /**
     * @param {StreamWriteEvent} args
     */
    onStreamWrite(args: StreamWriteEvent): void;
    /**
     * @param {StreamResetEvent} args
     */
    onStreamReset(args: StreamResetEvent): void;
    /**
     * @param {StreamNetworkFinishEvent} args
     */
    onStreamNetworkFinish(args: StreamNetworkFinishEvent): void;
    stopSendingRecv: boolean | undefined;
}
/**
 * WebTransport stream events
 */
export type WebTransportStreamEventHandler = import('./types').WebTransportStreamEventHandler;
/**
 * WebTransport stream events
 */
export type StreamRecvSignalEvent = import('./types').StreamRecvSignalEvent;
/**
 * WebTransport stream events
 */
export type StreamReadEvent = import('./types').StreamReadEvent;
/**
 * WebTransport stream events
 */
export type StreamWriteEvent = import('./types').StreamWriteEvent;
/**
 * WebTransport stream events
 */
export type StreamResetEvent = import('./types').StreamResetEvent;
/**
 * WebTransport stream events
 */
export type StreamNetworkFinishEvent = import('./types').StreamNetworkFinishEvent;
/**
 * WebTransport stream events
 */
export type NativeHttp3WTStream = import('./types').NativeHttp3WTStream;
/**
 * WebTransport stream events
 */
export type WebTransportReceiveStream = import('./dom').WebTransportReceiveStream;
/**
 * WebTransport stream events
 */
export type WebTransportSendStream = import('./dom').WebTransportSendStream;
/**
 * WebTransport stream events
 */
export type Http3WTSession = import('./session').Http3WTSession;
/**
 * WebTransport stream events
 */
export type WritableStreamDefaultController = import('stream/web').WritableStreamDefaultController;
//# sourceMappingURL=stream.d.ts.map